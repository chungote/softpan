
CREATE TABLE BANCOS_CTAS (
       cod_entidad          NUMERIC(3) NOT NULL,
       nro_cuenta           VARCHAR(20) NOT NULL,
       cod_moneda           INTEGER,
       saldo_cuenta         NUMERIC(12),
       desde_nro_cheque     NUMERIC(10),
       hasta_nro_cheque     NUMERIC(10),
       actual_nro_cheque    NUMERIC(10)
);

CREATE UNIQUE INDEX PK__BANCOS_CTAS__060DEAE8 ON BANCOS_CTAS
(
       cod_entidad,
       nro_cuenta
);


ALTER TABLE BANCOS_CTAS
       ADD PRIMARY KEY (cod_entidad, nro_cuenta);


CREATE TABLE CAJAS (
       cod_caja             NUMERIC(3) NOT NULL,
       alta_por             VARCHAR(25),
       fecha_alta           DATE,
       estado_caja          BIT,
       descripcion_caja     VARCHAR(50)
);

CREATE UNIQUE INDEX PK__CAJAS__09DE7BCC ON CAJAS
(
       cod_caja
);


ALTER TABLE CAJAS
       ADD PRIMARY KEY (cod_caja);


CREATE TABLE CATEGORIAS (
       cod_categoria        INTEGER NOT NULL,
       descripcion_categoria VARCHAR(25),
       tipo                 INTEGER
);

CREATE UNIQUE INDEX PK__CATEGORIAS__0BC6C43E ON CATEGORIAS
(
       cod_categoria
);


ALTER TABLE CATEGORIAS
       ADD PRIMARY KEY (cod_categoria);


CREATE TABLE CIUDADES (
       cod_ciudad           NUMERIC(5) NOT NULL,
       cod_estado           NUMERIC(4),
       descripcion_ciudad   VARCHAR(20)
);

CREATE UNIQUE INDEX PK__CIUDADES__1273C1CD ON CIUDADES
(
       cod_ciudad
);


ALTER TABLE CIUDADES
       ADD PRIMARY KEY (cod_ciudad);


CREATE TABLE CONDICIONES_PAGOS (
       cod_condicion        INTEGER NOT NULL,
       descripcion_condicion VARCHAR(100) NOT NULL,
       tipo_condicion       INTEGER NOT NULL,
       activo               INTEGER NOT NULL DEFAULT (1)
);

CREATE UNIQUE INDEX PK_CONDICIONES_PAGOS ON CONDICIONES_PAGOS
(
       cod_condicion
);


ALTER TABLE CONDICIONES_PAGOS
       ADD PRIMARY KEY (cod_condicion);


CREATE TABLE COTIZACIONES_MONEDAS (
       fecha_cotizacion     DATE NOT NULL DEFAULT getdate(),
       cod_moneda_origen    INTEGER NOT NULL DEFAULT (1),
       cod_moneda_destino   INTEGER NOT NULL DEFAULT (1),
       valor_cotizacion     NUMERIC(9) NOT NULL DEFAULT (0),
       operacion            INTEGER NOT NULL
);

CREATE UNIQUE INDEX PK__COTIZACIONES_MON__60FC61CA ON COTIZACIONES_MONEDAS
(
       fecha_cotizacion,
       cod_moneda_origen,
       cod_moneda_destino
);


ALTER TABLE COTIZACIONES_MONEDAS
       ADD PRIMARY KEY (fecha_cotizacion, cod_moneda_origen, 
              cod_moneda_destino);


CREATE TABLE DEPOSITO (
       cod_deposito         NUMERIC(2) NOT NULL,
       descripcion_deposito VARCHAR(25),
       ubicacion            VARCHAR(25)
);

CREATE UNIQUE INDEX PK__DEPOSITO__15502E78 ON DEPOSITO
(
       cod_deposito
);


ALTER TABLE DEPOSITO
       ADD PRIMARY KEY (cod_deposito);


CREATE TABLE DEPOSITO_PRODUCTOS (
       cod_deposito         NUMERIC(2) NOT NULL,
       cod_producto         NUMERIC(6) NOT NULL,
       cantidad_actual      NUMERIC(6) NOT NULL,
       cantidad_minima      NUMERIC(6) NOT NULL,
       cantidad_maxima      NUMERIC(6)
);

CREATE UNIQUE INDEX PK__DEPOSITO_PRODUCT__3A81B327 ON DEPOSITO_PRODUCTOS
(
       cod_deposito,
       cod_producto
);


ALTER TABLE DEPOSITO_PRODUCTOS
       ADD PRIMARY KEY (cod_deposito, cod_producto);


CREATE TABLE DETALLE_FACTURA_CLIENTE (
       cod_producto         NUMERIC(6) NOT NULL,
       nro_registro         NUMERIC(12) NOT NULL,
       nro_detalle          INTEGER NOT NULL,
       cantidad             NUMERIC(7) NOT NULL,
       precio               NUMERIC(12) NOT NULL,
       cod_tipo_iva         NUMERIC(1),
       porc_iva             REAL,
       precio_bruto         NUMERIC(12) NOT NULL
);

CREATE UNIQUE INDEX PK_DETALLE_FACTURA_CLIENTE ON DETALLE_FACTURA_CLIENTE
(
       cod_producto,
       nro_detalle,
       nro_registro
);


ALTER TABLE DETALLE_FACTURA_CLIENTE
       ADD PRIMARY KEY (cod_producto, nro_detalle, nro_registro);


CREATE TABLE DETALLE_FACTURA_PROVEEDOR (
       nro_factura          NUMERIC(10) NOT NULL,
       cod_persona          NUMERIC(8) NOT NULL,
       Cantidad             NUMERIC(8) NOT NULL,
       Precio               NUMERIC(12) NOT NULL,
       nro_detalle          INTEGER NOT NULL
);

CREATE UNIQUE INDEX PK__DETALLE_FACTURA___59063A47 ON DETALLE_FACTURA_PROVEEDOR
(
       nro_factura,
       cod_persona,
       nro_detalle
);


ALTER TABLE DETALLE_FACTURA_PROVEEDOR
       ADD PRIMARY KEY (nro_factura, cod_persona, nro_detalle);


CREATE TABLE DETALLE_HABILITACIONES (
       nro_habilitacion     NUMERIC(8) NOT NULL,
       nro_factura          NUMERIC(10) NOT NULL,
       tipo_documento       INTEGER NOT NULL,
       cod_cobro            INTEGER NOT NULL,
       importe_neto         NUMERIC(12) NOT NULL
);

CREATE UNIQUE INDEX PK_DETALLE_HABILITACIONES ON DETALLE_HABILITACIONES
(
       nro_habilitacion,
       nro_factura
);


ALTER TABLE DETALLE_HABILITACIONES
       ADD PRIMARY KEY (nro_habilitacion, nro_factura);


CREATE TABLE DETALLE_MOVIMIENTO_REPARTO (
       cod_movimiento       NUMERIC(8) NOT NULL,
       cod_producto         NUMERIC(6) NOT NULL,
       salida               INTEGER,
       cambios              INTEGER,
       remanentes           INTEGER,
       vendidos             INTEGER,
       precio               INTEGER,
       importe              NUMERIC(12)
);

CREATE UNIQUE INDEX PK__DETALLE_MOVIMIEN__6A30C649 ON DETALLE_MOVIMIENTO_REPARTO
(
       cod_movimiento,
       cod_producto
);


ALTER TABLE DETALLE_MOVIMIENTO_REPARTO
       ADD PRIMARY KEY (cod_movimiento, cod_producto);


CREATE TABLE DETALLE_NOTA_CREDITO (
       nro_detalle          INTEGER NOT NULL,
       nro_nota             VARCHAR(20) NOT NULL,
       cod_producto         NUMERIC(6) NOT NULL,
       cantidad             NUMERIC(7) NOT NULL,
       precio               NUMERIC(12) NOT NULL
);

CREATE UNIQUE INDEX PK__DETALLE_NOTA_CRE__73BA3083 ON DETALLE_NOTA_CREDITO
(
       nro_detalle,
       nro_nota,
       cod_producto
);


ALTER TABLE DETALLE_NOTA_CREDITO
       ADD PRIMARY KEY (nro_detalle, nro_nota, cod_producto);


CREATE TABLE DETALLE_NOTA_ENVIO (
       cod_producto         NUMERIC(6) NOT NULL,
       nro_nota             NUMERIC(8) NOT NULL,
       cantidad             NUMERIC(7) NOT NULL,
       precio               NUMERIC(12) NOT NULL
);

CREATE UNIQUE INDEX PK__DETALLE_NOTA_ENV__7B5B524B ON DETALLE_NOTA_ENVIO
(
       cod_producto,
       nro_nota
);


ALTER TABLE DETALLE_NOTA_ENVIO
       ADD PRIMARY KEY (cod_producto, nro_nota);


CREATE TABLE DETALLE_NOTA_REMISION (
       nro_remision         NUMERIC(10) NOT NULL,
       cod_producto         NUMERIC(6) NOT NULL,
       cantidad             NUMERIC(7) NOT NULL,
       precio               NUMERIC(12) NOT NULL
);

CREATE UNIQUE INDEX PK__DETALLE_NOTA_REM__7F2BE32F ON DETALLE_NOTA_REMISION
(
       nro_remision,
       cod_producto
);


ALTER TABLE DETALLE_NOTA_REMISION
       ADD PRIMARY KEY (nro_remision, cod_producto);


CREATE TABLE DETALLE_ORDEN_PAGO (
       nro_factura          NUMERIC(10) NOT NULL,
       proveedor            NUMERIC(8) NOT NULL,
       nro_orden_pago       NUMERIC(8) NOT NULL,
       importe              NUMERIC(12)
);

CREATE UNIQUE INDEX PK__DETALLE_ORDEN_PA__05D8E0BE ON DETALLE_ORDEN_PAGO
(
       nro_factura,
       proveedor,
       nro_orden_pago
);


ALTER TABLE DETALLE_ORDEN_PAGO
       ADD PRIMARY KEY (nro_factura, proveedor, nro_orden_pago);


CREATE TABLE DETALLE_ORDEN_PRODUCCION (
       cod_producto         NUMERIC(6) NOT NULL,
       orden_nro            NUMERIC(12) NOT NULL,
       cantidad_kgs         NUMERIC(8) NOT NULL,
       Importe_en_insumos   NUMERIC(12),
       costo_mano_obra      NUMERIC(12)
);

CREATE UNIQUE INDEX PK__DETALLE_ORDEN_PR__0F624AF8 ON DETALLE_ORDEN_PRODUCCION
(
       cod_producto,
       orden_nro
);


ALTER TABLE DETALLE_ORDEN_PRODUCCION
       ADD PRIMARY KEY (cod_producto, orden_nro);


CREATE TABLE DETALLE_ORDEN_REALIZADA (
       cod_producto         NUMERIC(6) NOT NULL,
       nro_orden_terminado  NUMERIC(12) NOT NULL,
       cantidad_producida_kg NUMERIC(8) NOT NULL,
       cantidad_estimada_kg NUMERIC(8) NOT NULL
);

CREATE UNIQUE INDEX PK__DETALLE_ORDEN_RE__160F4887 ON DETALLE_ORDEN_REALIZADA
(
       cod_producto,
       nro_orden_terminado
);


ALTER TABLE DETALLE_ORDEN_REALIZADA
       ADD PRIMARY KEY (cod_producto, nro_orden_terminado);


CREATE TABLE DETALLE_PAGO_CLIENTE (
       nro_movimiento       NUMERIC(10) NOT NULL,
       nro_factura          NUMERIC(10) NOT NULL,
       nro_detalle          INTEGER NOT NULL,
       fecha_emision        DATE NOT NULL,
       fecha_vence          DATE NOT NULL,
       importe              NUMERIC(12) NOT NULL,
       cod_tipo_pago        NUMERIC(2) NOT NULL,
       banco                NUMERIC(3) NOT NULL,
       nro_cuenta           VARCHAR(20)
);

CREATE UNIQUE INDEX PK__DETALLE_PAGO_CLI__22751F6C ON DETALLE_PAGO_CLIENTE
(
       nro_movimiento,
       nro_factura,
       nro_detalle
);


ALTER TABLE DETALLE_PAGO_CLIENTE
       ADD PRIMARY KEY (nro_movimiento, nro_factura, nro_detalle);


CREATE TABLE DETALLE_PEDIDO_CLIENTE (
       cod_producto         NUMERIC(6) NOT NULL,
       nro_detalle          INTEGER NOT NULL,
       nro_pedido           NUMERIC(9) NOT NULL,
       Cantidad             NUMERIC(6),
       Precio               NUMERIC(12),
       cod_tipo_iva         NUMERIC(1),
       importe_gravado      NUMERIC(12),
       precio_iva           NUMERIC(12),
       porc_iva             DECIMAL(3) DEFAULT (0)
);

CREATE UNIQUE INDEX PK__DETALLE_PEDIDO_C__2739D489 ON DETALLE_PEDIDO_CLIENTE
(
       cod_producto,
       nro_detalle,
       nro_pedido
);


ALTER TABLE DETALLE_PEDIDO_CLIENTE
       ADD PRIMARY KEY (cod_producto, nro_detalle, nro_pedido);


CREATE TABLE DETALLE_PEDIDO_PROVEEDOR (
       nro_detalle          NUMERIC(8) NOT NULL,
       nro_pedido           INTEGER NOT NULL,
       Cantidad             NUMERIC(8) NOT NULL,
       Precio               NUMERIC(12) NOT NULL
);

CREATE UNIQUE INDEX PK__DETALLE_PEDIDO_P__2B0A656D ON DETALLE_PEDIDO_PROVEEDOR
(
       nro_detalle,
       nro_pedido
);


ALTER TABLE DETALLE_PEDIDO_PROVEEDOR
       ADD PRIMARY KEY (nro_detalle, nro_pedido);


CREATE TABLE DETALLE_PEDIDO_REPARTO (
       cod_producto         NUMERIC(6) NOT NULL,
       nro_pedido           NUMERIC(6) NOT NULL,
       cantidad             NUMERIC(7) NOT NULL,
       precio               NUMERIC(12) NOT NULL,
       nro_detalle          INTEGER NOT NULL
);

CREATE UNIQUE INDEX PK__DETALLE_PEDIDO_R__2EDAF651 ON DETALLE_PEDIDO_REPARTO
(
       cod_producto,
       nro_pedido,
       nro_detalle
);


ALTER TABLE DETALLE_PEDIDO_REPARTO
       ADD PRIMARY KEY (cod_producto, nro_pedido, nro_detalle);


CREATE TABLE DETALLE_RECETAS (
       cod_receta           NUMERIC(6) NOT NULL,
       cantidad             NUMERIC(7),
       precio_costo         NUMERIC(8),
       cod_producto         NUMERIC(6) NOT NULL
);

CREATE UNIQUE INDEX PK_DETALLE_RECETAS ON DETALLE_RECETAS
(
       cod_receta,
       cod_producto
);


ALTER TABLE DETALLE_RECETAS
       ADD PRIMARY KEY (cod_receta, cod_producto);


CREATE TABLE EMISION_CHEQUE (
       nro_cheque           NUMERIC(10) NOT NULL,
       cod_estado           NUMERIC(1),
       cod_usuario          INTEGER,
       nro_orden_pago       NUMERIC(8),
       cod_entidad          NUMERIC(3),
       nro_cuenta           VARCHAR(20),
       fecha_emision        DATE,
       importe_cheque       NUMERIC(12)
);

CREATE UNIQUE INDEX PK__EMISION_CHEQUE__3B40CD36 ON EMISION_CHEQUE
(
       nro_cheque
);


ALTER TABLE EMISION_CHEQUE
       ADD PRIMARY KEY (nro_cheque);


CREATE TABLE ENTIDAD_FINACIERA (
       cod_entidad          NUMERIC(3) NOT NULL,
       descripcion_entidad  VARCHAR(50) NOT NULL,
       ruc                  VARCHAR(13),
       direccion            VARCHAR(50),
       telefono             VARCHAR(20)
);

CREATE UNIQUE INDEX PK__ENTIDAD_FINACIER__014935CB ON ENTIDAD_FINACIERA
(
       cod_entidad
);


ALTER TABLE ENTIDAD_FINACIERA
       ADD PRIMARY KEY (cod_entidad);


CREATE TABLE EQUIVALENCIAS (
       cod_medida           NUMERIC(3) NOT NULL,
       cod_medida_1         NUMERIC(3) NOT NULL,
       equivalencia         NUMERIC(7),
       operacion            INTEGER
);

CREATE UNIQUE INDEX PK_EQUIVALENCIAS ON EQUIVALENCIAS
(
       cod_medida,
       cod_medida_1
);


ALTER TABLE EQUIVALENCIAS
       ADD PRIMARY KEY (cod_medida, cod_medida_1);


CREATE TABLE ESTADO_CHEQUE (
       cod_estado           NUMERIC(1) NOT NULL,
       descripcion_estado   VARCHAR(20)
);

CREATE UNIQUE INDEX PK__ESTADO_CHEQUE__395884C4 ON ESTADO_CHEQUE
(
       cod_estado
);


ALTER TABLE ESTADO_CHEQUE
       ADD PRIMARY KEY (cod_estado);


CREATE TABLE ESTADO_PRODUCCION (
       cod_estado           NUMERIC(2) NOT NULL,
       descripcion_estado   VARCHAR(25)
);

CREATE UNIQUE INDEX PK__ESTADO_PRODUCCIO__09A971A2 ON ESTADO_PRODUCCION
(
       cod_estado
);


ALTER TABLE ESTADO_PRODUCCION
       ADD PRIMARY KEY (cod_estado);


CREATE TABLE ESTADOS (
       cod_estado           NUMERIC(4) NOT NULL,
       cod_pais             NUMERIC(4),
       descripcion_estado   VARCHAR(50)
);

CREATE UNIQUE INDEX PK__ESTADOS__0F975522 ON ESTADOS
(
       cod_estado
);


ALTER TABLE ESTADOS
       ADD PRIMARY KEY (cod_estado);


CREATE TABLE ESTANTES (
       cod_estante          NUMERIC(2) NOT NULL,
       descripcion_estante  VARCHAR(25),
       ubicacion            VARCHAR(50)
);

CREATE UNIQUE INDEX PK__ESTANTES__2D27B809 ON ESTANTES
(
       cod_estante
);


ALTER TABLE ESTANTES
       ADD PRIMARY KEY (cod_estante);


CREATE TABLE FACTURA_CLIENTE (
       nro_factura          NUMERIC(13) NOT NULL,
       nro_habilitacion     NUMERIC(8),
       fecha_factura        DATE,
       fecha_vencimiento    DATE,
       saldo                NUMERIC(8),
       nro_pedido           NUMERIC(9),
       estado_factura       INTEGER,
       total_descuento      NUMERIC(12),
       total_exentas        NUMERIC(12),
       total_gravadas_5     NUMERIC(12),
       total_factura        NUMERIC(12),
       total_gravadas_10    NUMERIC(12),
       usuario              VARCHAR(15),
       nro_remision         NUMERIC(10),
       observaciones        LONG VARCHAR,
       cod_moneda           INTEGER,
       tipo_cambio          NUMERIC(12) NOT NULL,
       motivo_anulacion     VARCHAR(500),
       fecha_anulacion      DATE,
       contabilizado        INTEGER NOT NULL DEFAULT (0),
       nro_registro         NUMERIC(12) NOT NULL,
       cod_tipo_comprobante NUMERIC(3) NOT NULL DEFAULT (1),
       cod_persona          NUMERIC(8),
       cod_condicion        INTEGER NOT NULL,
       usuario_pedido       VARCHAR(15),
       iva_incluido         INTEGER
);

CREATE UNIQUE INDEX PK_FACTURA_CLIENTE ON FACTURA_CLIENTE
(
       nro_registro
);

CREATE INDEX inx_persona ON FACTURA_CLIENTE
(
       cod_persona
);


ALTER TABLE FACTURA_CLIENTE
       ADD PRIMARY KEY (nro_registro);


CREATE TABLE FACTURA_PROVEEDOR (
       nro_factura          NUMERIC(10) NOT NULL,
       proveedor            NUMERIC(8) NOT NULL,
       fecha_factura        DATE NOT NULL,
       tipo_factura         INTEGER NOT NULL,
       nro_pedido           INTEGER,
       fecha_vence          DATE NOT NULL,
       ImporteFactura       NUMERIC(15) NOT NULL,
       saldo                NUMERIC(12) NOT NULL,
       estado               INTEGER,
       total_exentas        NUMERIC(12),
       total_descuentos     NUMERIC(12),
       total_gravadas_10    NUMERIC(12),
       total_gravadas_5     NUMERIC(12),
       total_factura        NUMERIC(12),
       observaciones        LONG VARCHAR
);

CREATE UNIQUE INDEX PK__FACTURA_PROVEEDO__5629CD9C ON FACTURA_PROVEEDOR
(
       nro_factura,
       proveedor
);


ALTER TABLE FACTURA_PROVEEDOR
       ADD PRIMARY KEY (nro_factura, proveedor);


CREATE TABLE GRUPO_PRODUCTO (
       cod_grupo            NUMERIC(2) NOT NULL,
       descripcion_grupo    VARCHAR(60),
       factor_produccion    NUMERIC(5),
       cod_categoria        INTEGER,
       es_ingrediente       INTEGER
);

CREATE UNIQUE INDEX PK__GRUPO_PRODUCTO__2F10007B ON GRUPO_PRODUCTO
(
       cod_grupo
);


ALTER TABLE GRUPO_PRODUCTO
       ADD PRIMARY KEY (cod_grupo);


CREATE TABLE HABILITACIONES (
       nro_habilitacion     NUMERIC(8) NOT NULL,
       usuario              VARCHAR(25),
       cod_caja             NUMERIC(3),
       fecha_habilitacion   DATE,
       hora_habilitacion    DATE,
       total_tarjetas       NUMERIC(12),
       total_efectivo       NUMERIC(12),
       total_cheques        NUMERIC(12),
       total_nc             NUMERIC(12),
       monto_inicial        NUMERIC(15) NOT NULL DEFAULT (0),
       cierre_definitivo    INTEGER,
       hora_cierre          INTEGER NOT NULL
);

CREATE UNIQUE INDEX PK__HABILITACIONES__3E52440B ON HABILITACIONES
(
       nro_habilitacion
);


ALTER TABLE HABILITACIONES
       ADD PRIMARY KEY (nro_habilitacion);


CREATE TABLE LISTA_PRECIOS (
       nro_lista            INTEGER NOT NULL,
       descripcion_lista    VARCHAR(50),
       fecha_alta           DATE,
       observacion          VARCHAR(100),
       cod_moneda           INTEGER,
       iva_inc              INTEGER,
       redondeo             INTEGER
);

CREATE UNIQUE INDEX PK_Lista_Precios ON LISTA_PRECIOS
(
       nro_lista
);


ALTER TABLE LISTA_PRECIOS
       ADD PRIMARY KEY (nro_lista);


CREATE TABLE LISTA_PRECIOS_DET (
       nro_lista            INTEGER NOT NULL,
       cod_producto         NUMERIC(6) NOT NULL,
       iva_inc              INTEGER,
       cod_moneda           INTEGER,
       redondeo             INTEGER,
       precio               NUMERIC(12),
       estado               BIT NOT NULL DEFAULT (1)
);

CREATE UNIQUE INDEX PK_LISTA_PRECIOS_DET ON LISTA_PRECIOS_DET
(
       nro_lista,
       cod_producto
);


ALTER TABLE LISTA_PRECIOS_DET
       ADD PRIMARY KEY (nro_lista, cod_producto);


CREATE TABLE MARCA (
       cod_marca            NUMERIC(2) NOT NULL,
       descripcion_marca    VARCHAR(60),
       fecha_alta           DATE NOT NULL DEFAULT getdate()
);

CREATE UNIQUE INDEX PK__MARCA__1920BF5C ON MARCA
(
       cod_marca
);


ALTER TABLE MARCA
       ADD PRIMARY KEY (cod_marca);


CREATE TABLE MEDIDAS (
       cod_medida           NUMERIC(3) NOT NULL,
       descripcion_medida   VARCHAR(20) NOT NULL,
       abreviatura          VARCHAR(5)
);

CREATE UNIQUE INDEX PK__MEDIDAS__1B0907CE ON MEDIDAS
(
       cod_medida
);


ALTER TABLE MEDIDAS
       ADD PRIMARY KEY (cod_medida);


CREATE TABLE MONEDAS (
       cod_moneda           INTEGER NOT NULL,
       denominacion         VARCHAR(25),
       siglas               VARCHAR(4) NOT NULL,
       tipo_cambio          NUMERIC(12),
       fecha_cotizacion     DATE
);

CREATE UNIQUE INDEX PK__MONEDAS__03317E3D ON MONEDAS
(
       cod_moneda
);


ALTER TABLE MONEDAS
       ADD PRIMARY KEY (cod_moneda);


CREATE TABLE MOVIMIENTO_REPARTO (
       cod_movimiento       NUMERIC(8) NOT NULL,
       fecha_movimiento     DATE,
       nro_pedido           NUMERIC(6),
       efectivo_ingresado   NUMERIC(12),
       efectivo_salido      NUMERIC(12),
       usuario              INTEGER
);

CREATE UNIQUE INDEX PK__MOVIMIENTO_REPAR__6754599E ON MOVIMIENTO_REPARTO
(
       cod_movimiento
);


ALTER TABLE MOVIMIENTO_REPARTO
       ADD PRIMARY KEY (cod_movimiento);


CREATE TABLE NOTA_CREDITO (
       nro_nota             VARCHAR(20) NOT NULL,
       nro_factura          NUMERIC(10),
       fecha                DATE,
       tipo                 INTEGER,
       estado_factura       INTEGER,
       total_descuento      NUMERIC(12),
       total_exentas        NUMERIC(12),
       total_gravadas_5     NUMERIC(12),
       total_factura        NUMERIC(12),
       observaciones        LONG VARCHAR,
       total_gravadas_10    NUMERIC(12),
       cod_usuario          INTEGER,
       sub_total_iva        INTEGER
);

CREATE UNIQUE INDEX PK__NOTA_CREDITO__70DDC3D8 ON NOTA_CREDITO
(
       nro_nota
);


ALTER TABLE NOTA_CREDITO
       ADD PRIMARY KEY (nro_nota);


CREATE TABLE NOTA_ENVIO (
       nro_nota             NUMERIC(8) NOT NULL,
       repartidor           NUMERIC(8),
       nro_pedido           NUMERIC(6),
       fecha_envio          DATE,
       estado               INTEGER,
       observaciones        VARCHAR(150),
       total_ingresado      NUMERIC(12),
       usuario              INTEGER
);

CREATE UNIQUE INDEX PK__NOTA_ENVIO__778AC167 ON NOTA_ENVIO
(
       nro_nota
);


ALTER TABLE NOTA_ENVIO
       ADD PRIMARY KEY (nro_nota);


CREATE TABLE NOTA_REMISION (
       nro_remision         NUMERIC(10) NOT NULL,
       fecha_llegada        DATE,
       cod_persona          NUMERIC(8),
       fecha_remision       DATE,
       observaciones        VARCHAR(100),
       estado_remision      NUMERIC(1),
       cod_vendedor         NUMERIC(8),
       facturado            INTEGER
);

CREATE UNIQUE INDEX PK__NOTA_REMISION__4222D4EF ON NOTA_REMISION
(
       nro_remision
);


ALTER TABLE NOTA_REMISION
       ADD PRIMARY KEY (nro_remision);


CREATE TABLE ORDEN_PAGO (
       nro_orden_pago       NUMERIC(8) NOT NULL,
       fecha_orden_pago     DATE,
       ala_orden_de         VARCHAR(100),
       importe_pago         NUMERIC(10),
       usuario              INTEGER,
       cod_persona          NUMERIC(8)
);

CREATE UNIQUE INDEX PK__ORDEN_PAGO__02FC7413 ON ORDEN_PAGO
(
       nro_orden_pago
);


ALTER TABLE ORDEN_PAGO
       ADD PRIMARY KEY (nro_orden_pago);


CREATE TABLE ORDEN_PRODUCCION (
       orden_nro            NUMERIC(12) NOT NULL,
       fecha_hora_orden     DATE NOT NULL,
       cod_estado           NUMERIC(2),
       usuario              INTEGER NOT NULL,
       fecha_hora_inicio    DATE NOT NULL,
       fecha_hora_entrega   DATE NOT NULL,
       costo_total_insumos  NUMERIC(12) NOT NULL,
       costo_total_mano_obra NUMERIC(12) NOT NULL
);

CREATE UNIQUE INDEX PK__ORDEN_PRODUCCION__0B91BA14 ON ORDEN_PRODUCCION
(
       orden_nro
);


ALTER TABLE ORDEN_PRODUCCION
       ADD PRIMARY KEY (orden_nro);


CREATE TABLE ORDEN_PRODUCCION_REALIZADA (
       nro_orden_terminado  NUMERIC(12) NOT NULL,
       orden_nro            NUMERIC(12),
       observaciones        LONG VARCHAR,
       fecha_registro       DATE
);

CREATE UNIQUE INDEX PK__ORDEN_PRODUCCION__1332DBDC ON ORDEN_PRODUCCION_REALIZADA
(
       nro_orden_terminado
);


ALTER TABLE ORDEN_PRODUCCION_REALIZADA
       ADD PRIMARY KEY (nro_orden_terminado);


CREATE TABLE PAGO_CLIENTE (
       nro_movimiento       NUMERIC(10) NOT NULL,
       cod_entidad          NUMERIC(3),
       cod_tipo_pago        NUMERIC(2),
       fecha_pago           DATE,
       cod_moneda           INTEGER,
       monto_pago           NUMERIC(12),
       nro_habilitacion     NUMERIC(8),
       cliente              NUMERIC(8),
       nro_factura          NUMERIC(10),
       cod_usuario          VARCHAR(15)
);

CREATE UNIQUE INDEX PK__PAGO_CLIENTE__1BC821DD ON PAGO_CLIENTE
(
       nro_movimiento
);


ALTER TABLE PAGO_CLIENTE
       ADD PRIMARY KEY (nro_movimiento);


CREATE TABLE PAGO_PROVEEDOR (
       id_pago              INTEGER NOT NULL,
       nro_factura          NUMERIC(10),
       fecha_pago           DATE NOT NULL,
       tipo_pago            VARCHAR(3),
       proveedor            NUMERIC(8),
       monto_pago           NUMERIC(8),
       idproveedor          INTEGER NOT NULL
);

CREATE UNIQUE INDEX PK__PAGO_PROVEEDOR__44CA3770 ON PAGO_PROVEEDOR
(
       id_pago
);


ALTER TABLE PAGO_PROVEEDOR
       ADD PRIMARY KEY (id_pago);


CREATE TABLE PAISES (
       cod_pais             NUMERIC(4) NOT NULL,
       descripcion_pais     VARCHAR(20)
);

CREATE UNIQUE INDEX PK__PAISES__0DAF0CB0 ON PAISES
(
       cod_pais
);


ALTER TABLE PAISES
       ADD PRIMARY KEY (cod_pais);


CREATE TABLE PARAMETROS_EMPRESAS (
       nombre_empresa       VARCHAR(100),
       ruc_empresa          VARCHAR(11),
       nro_patronal         VARCHAR(50),
       propietario          VARCHAR(100),
       direccion            VARCHAR(100),
       ciudad               VARCHAR(45),
       telefono             VARCHAR(15),
       email                VARCHAR(100),
       max_items            INTEGER,
       venta_cliente        INTEGER,
       venta_tipo_comp      INTEGER,
       venta_cod_vendedor   INTEGER,
       cod_moneda           INTEGER NOT NULL,
       cod_moneda_local     INTEGER,
       lista_precio_minorista INTEGER,
       lista_precio_mayorista INTEGER
);

CREATE UNIQUE INDEX PK_PARAMETROS_EMPRESAS ON PARAMETROS_EMPRESAS
(
       cod_moneda,
       nombre_empresa
);


ALTER TABLE PARAMETROS_EMPRESAS
       ADD PRIMARY KEY (cod_moneda, nombre_empresa);


CREATE TABLE PARAMETROS_USUARIOS_PEDIDOS (
       tipo                 INTEGER NOT NULL,
       usuario              VARCHAR(15) NOT NULL
);

CREATE UNIQUE INDEX PK_PARAMETROS_USUARIOS_PEDIDOS ON PARAMETROS_USUARIOS_PEDIDOS
(
       usuario
);


ALTER TABLE PARAMETROS_USUARIOS_PEDIDOS
       ADD PRIMARY KEY (usuario);


CREATE TABLE PEDIDO_CLIENTE (
       nro_pedido           NUMERIC(9) NOT NULL,
       fecha_pedido         DATE,
       total_pedido         NUMERIC(8),
       cod_tipo_comprobante NUMERIC(3),
       estado_pedido        NUMERIC(1),
       fecha_entrega        DATE,
       usuario              VARCHAR(15) NOT NULL,
       tipo_pedido          NUMERIC(2) NOT NULL DEFAULT (1),
       iva_inc              INTEGER NOT NULL DEFAULT (1),
       importe_gravado_10   NUMERIC(15,5) NOT NULL DEFAULT (0),
       importe_gravado_5    NUMERIC(15,5) NOT NULL DEFAULT (0),
       importe_exento       NUMERIC(15,5) NOT NULL DEFAULT (0),
       observaciones        VARCHAR(250) NOT NULL DEFAULT '',
       facturar             INTEGER,
       cod_moneda           INTEGER NOT NULL DEFAULT (1),
       cod_condicion        INTEGER NOT NULL,
       aprobacion           INTEGER NOT NULL DEFAULT (0),
       cod_persona          NUMERIC(8)
);

CREATE UNIQUE INDEX PK__PEDIDO_CLIENTE__440B1D61 ON PEDIDO_CLIENTE
(
       nro_pedido
);


ALTER TABLE PEDIDO_CLIENTE
       ADD PRIMARY KEY (nro_pedido);


CREATE TABLE PEDIDO_PROVEEDOR (
       nro_pedido           INTEGER NOT NULL,
       proveedor            NUMERIC(8),
       ruc                  NUMERIC(11),
       fecha_pedido         DATE,
       importe_pedido       NUMERIC(8),
       estado_pedido        INTEGER,
       tipo_pago            INTEGER,
       cod_usuario          INTEGER,
       fecha_entrega        DATE
);

CREATE UNIQUE INDEX PK__PEDIDO_PROVEEDOR__5441852A ON PEDIDO_PROVEEDOR
(
       nro_pedido
);


ALTER TABLE PEDIDO_PROVEEDOR
       ADD PRIMARY KEY (nro_pedido);


CREATE TABLE PEDIDO_REPARTO (
       nro_pedido           NUMERIC(6) NOT NULL,
       cod_usuario          INTEGER,
       fecha_pedido         DATE,
       fecha_entrega        DATE,
       estado               INTEGER,
       efectivo_ingresado   NUMERIC(12),
       cod_persona          NUMERIC(8)
);

CREATE UNIQUE INDEX PK__PEDIDO_REPARTO__6383C8BA ON PEDIDO_REPARTO
(
       nro_pedido
);


ALTER TABLE PEDIDO_REPARTO
       ADD PRIMARY KEY (nro_pedido);


CREATE TABLE PERSONAS (
       cod_persona          NUMERIC(8) NOT NULL,
       nombre_fantasia      VARCHAR(100),
       nombres              VARCHAR(80),
       contacto             VARCHAR(50),
       apellidos            VARCHAR(80),
       fecha_alta           DATE,
       cod_tipo_documento   NUMERIC(2),
       nro_documento        VARCHAR(20),
       telefono             VARCHAR(16),
       nacionalidad         NUMERIC(4),
       departamento         NUMERIC(4),
       celular              VARCHAR(16),
       saldo                NUMERIC(12),
       ciudad               VARCHAR(25),
       limite_credito       NUMERIC(12),
       direccion            VARCHAR(100),
       e_mail               VARCHAR(80),
       web_site             VARCHAR(80),
       estado               BIT,
       tipo_persona         INTEGER,
       fax                  VARCHAR(16),
       es_cliente           INTEGER,
       es_proveedor         INTEGER,
       es_empleado          INTEGER,
       es_repartidor        INTEGER,
       es_panadero          INTEGER,
       tipo_precio          INTEGER,
       nro_lista            INTEGER
);

CREATE UNIQUE INDEX PK__PERSONAS__46136164 ON PERSONAS
(
       cod_persona
);


ALTER TABLE PERSONAS
       ADD PRIMARY KEY (cod_persona);


CREATE TABLE PRODUCTOS (
       cod_producto         NUMERIC(6) NOT NULL,
       descripcion          VARCHAR(30),
       cod_grupo            NUMERIC(2),
       cod_estante          NUMERIC(2),
       cod_tipo_iva         NUMERIC(1),
       cod_procedencia      NUMERIC(4),
       porc_descuento       NUMERIC(5),
       cod_medida           NUMERIC(3),
       cod_tipo_producto    INTEGER,
       en_oferta            BIT,
       precio_venta         NUMERIC(12),
       estado               BIT,
       fecha_alta           DATE,
       dias_vigencia        INTEGER,
       observaciones        VARCHAR(150),
       cod_deposito         NUMERIC(2),
       cantidad_actual      NUMERIC(6),
       cantidad_maxima      NUMERIC(6),
       cantidad_minima      NUMERIC(6),
       modo_preparacion     LONG VARCHAR,
       notas                LONG VARCHAR,
       tiene_receta         BIT,
       cantidad_x_medida    INTEGER,
       activo_venta         INTEGER DEFAULT (1),
       activo_compra        INTEGER DEFAULT (1),
       activo_produccion    INTEGER DEFAULT (1),
       es_servicio          INTEGER,
       es_compuesto         INTEGER,
       tiene_stock          INTEGER,
       inactivo             INTEGER,
       precio_costo         NUMERIC(12),
       cod_marca            NUMERIC(2)
);

CREATE UNIQUE INDEX PK__PRODUCTOS__31EC6D26 ON PRODUCTOS
(
       cod_producto
);

CREATE INDEX IDX_DESCRIPCION_PRODUCTO_ASC ON PRODUCTOS
(
       descripcion
);

CREATE INDEX IDX_DESCRIPCION_PRODUCTO_DESC ON PRODUCTOS
(
       descripcion
);


ALTER TABLE PRODUCTOS
       ADD PRIMARY KEY (cod_producto);


CREATE TABLE RECETAS (
       cod_receta           NUMERIC(6) NOT NULL,
       descripcion_receta   VARCHAR(100),
       cod_producto         NUMERIC(6),
       modo_preparacion     VARCHAR(350),
       notas                VARCHAR(225),
       porc_beneficio       REAL,
       costo_mano_obra      NUMERIC(8),
       costo_total_insumos  NUMERIC(8),
       costo_instalacion    NUMERIC(8),
       costo_total_producto NUMERIC(8),
       precio_venta         NUMERIC(8),
       foto                 LONG VARBINARY
);

CREATE UNIQUE INDEX PK__RECETAS__32AB8735 ON RECETAS
(
       cod_receta
);


ALTER TABLE RECETAS
       ADD PRIMARY KEY (cod_receta);


CREATE TABLE SYS_GRUPOS_USUARIOS (
       cod_grupo            VARCHAR(50) NOT NULL,
       supervisor           INTEGER,
       confirmado           INTEGER DEFAULT (0)
);

CREATE UNIQUE INDEX PK__SYS_GRUPOS_USUAR__7D0E9093 ON SYS_GRUPOS_USUARIOS
(
       cod_grupo
);


ALTER TABLE SYS_GRUPOS_USUARIOS
       ADD PRIMARY KEY (cod_grupo);


CREATE TABLE SYS_MENUS (
       MENU                 VARCHAR(200) NOT NULL DEFAULT '',
       ID                   VARCHAR(50) NOT NULL DEFAULT '',
       TIPO                 INTEGER NOT NULL DEFAULT 0,
       ORDEN                INTEGER NOT NULL DEFAULT 0,
       SISTEMA              INTEGER NOT NULL DEFAULT 0,
       activo               INTEGER NOT NULL DEFAULT 1
);

CREATE UNIQUE INDEX ID ON SYS_MENUS
(
       ID
);


ALTER TABLE SYS_MENUS
       ADD PRIMARY KEY (ID);


CREATE TABLE SYS_PERMISOS (
       MENU                 VARCHAR(200) NOT NULL,
       ID                   VARCHAR(50) NOT NULL DEFAULT '',
       TIPO                 INTEGER NOT NULL,
       ORDEN                INTEGER NOT NULL,
       VER                  INTEGER NOT NULL,
       GRABAR               INTEGER NOT NULL,
       BORRAR               INTEGER NOT NULL,
       INCLUIR              INTEGER NOT NULL,
       MOD_CANT             INTEGER NOT NULL,
       MOD_DESC             INTEGER NOT NULL,
       MOD_PRECIO           INTEGER NOT NULL,
       SISTEMA              INTEGER NOT NULL,
       print_report         INTEGER NOT NULL,
       cod_grupo            VARCHAR(50) NOT NULL
);

CREATE UNIQUE INDEX GRUPO_MENU ON SYS_PERMISOS
(
       cod_grupo,
       ORDEN,
       ID
);


ALTER TABLE SYS_PERMISOS
       ADD PRIMARY KEY (cod_grupo, ORDEN, ID);


CREATE TABLE SYS_USUARIOS (
       contrasenia          VARCHAR(10),
       estado               INTEGER,
       usuario              VARCHAR(15) NOT NULL,
       cod_persona          NUMERIC(8),
       fecha_ingreso        DATE DEFAULT getdate(),
       dias_sin_conexion    INTEGER DEFAULT (0),
       cant_pc              INTEGER DEFAULT (0),
       cod_grupo            VARCHAR(50)
);

CREATE UNIQUE INDEX PK__USUARIOS__7A9C383C ON SYS_USUARIOS
(
       usuario
);


ALTER TABLE SYS_USUARIOS
       ADD PRIMARY KEY (usuario);


CREATE TABLE TIPO_COMPROBANTE (
       cod_tipo_comprobante NUMERIC(3) NOT NULL,
       descripcion_tipo_comprobante VARCHAR(60) NOT NULL,
       calcula_imp          BIT NOT NULL DEFAULT (0),
       tipo_opcion          INTEGER NOT NULL DEFAULT (0),
       inactivo_compras     INTEGER NOT NULL DEFAULT (0),
       inactivo_ventas      INTEGER NOT NULL DEFAULT (0),
       cta_merc_exenta      VARCHAR(25),
       cta_merc_gravada     VARCHAR(25),
       cta_vtas_exenta      VARCHAR(25),
       cta_vtas_gravada     VARCHAR(25),
       fecha_alta           DATE NOT NULL DEFAULT getdate(),
       usuario              VARCHAR(20) NOT NULL DEFAULT suser_sname(),
       inactivo_totalmente  BIT NOT NULL DEFAULT (0),
       cta_ventas_gravada_5 VARCHAR(25) NOT NULL DEFAULT '',
       cta_merca_gravada_5  VARCHAR(25) NOT NULL DEFAULT '',
       snc                  INTEGER,
       nc                   INTEGER,
       nd                   INTEGER,
       numero_inicial       NUMERIC(10),
       expedicion           VARCHAR(3),
       archivo_formato      VARCHAR(50),
       validez_timbrado     DATE
);

CREATE UNIQUE INDEX PK__tipo_comprobante__4460231C ON TIPO_COMPROBANTE
(
       cod_tipo_comprobante
);


ALTER TABLE TIPO_COMPROBANTE
       ADD PRIMARY KEY (cod_tipo_comprobante);


CREATE TABLE TIPO_DOCUMENTO (
       cod_tipo_documento   NUMERIC(2) NOT NULL,
       descripcion          VARCHAR(40),
       abreviatura          VARCHAR(10)
);

CREATE UNIQUE INDEX PK__TIPO_DOCUMENTO__5CD6CB2B ON TIPO_DOCUMENTO
(
       cod_tipo_documento
);


ALTER TABLE TIPO_DOCUMENTO
       ADD PRIMARY KEY (cod_tipo_documento);


CREATE TABLE TIPO_IVA (
       cod_tipo_iva         NUMERIC(1) NOT NULL,
       descripcion_tipo_iva VARCHAR(25),
       porcentage_iva       NUMERIC(3) NOT NULL
);

CREATE UNIQUE INDEX PK__TIPO_IVA__1CF15040 ON TIPO_IVA
(
       cod_tipo_iva
);


ALTER TABLE TIPO_IVA
       ADD PRIMARY KEY (cod_tipo_iva);


CREATE TABLE TIPO_PAGO (
       cod_tipo_pago        NUMERIC(2) NOT NULL,
       descripcion_tipo_pago VARCHAR(50) NOT NULL
);

CREATE UNIQUE INDEX PK__TIPO_PAGO__19DFD96B ON TIPO_PAGO
(
       cod_tipo_pago
);


ALTER TABLE TIPO_PAGO
       ADD PRIMARY KEY (cod_tipo_pago);


ALTER TABLE BANCOS_CTAS
       ADD FOREIGN KEY (cod_moneda)
                             REFERENCES MONEDAS
                             ON DELETE SET NULL;


ALTER TABLE BANCOS_CTAS
       ADD FOREIGN KEY (cod_entidad)
                             REFERENCES ENTIDAD_FINACIERA
                             ON DELETE RESTRICT;


ALTER TABLE CIUDADES
       ADD FOREIGN KEY (cod_estado)
                             REFERENCES ESTADOS
                             ON DELETE SET NULL;


ALTER TABLE COTIZACIONES_MONEDAS
       ADD FOREIGN KEY (cod_moneda_destino)
                             REFERENCES MONEDAS
                             ON DELETE RESTRICT;


ALTER TABLE COTIZACIONES_MONEDAS
       ADD FOREIGN KEY (cod_moneda_origen)
                             REFERENCES MONEDAS
                             ON DELETE RESTRICT;


ALTER TABLE DEPOSITO_PRODUCTOS
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE DEPOSITO_PRODUCTOS
       ADD FOREIGN KEY (cod_deposito)
                             REFERENCES DEPOSITO
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_FACTURA_CLIENTE
       ADD FOREIGN KEY (nro_registro)
                             REFERENCES FACTURA_CLIENTE
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_FACTURA_CLIENTE
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_FACTURA_PROVEEDOR
       ADD FOREIGN KEY (cod_persona)
                             REFERENCES PERSONAS
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_FACTURA_PROVEEDOR
       ADD FOREIGN KEY (nro_factura, cod_persona)
                             REFERENCES FACTURA_PROVEEDOR
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_HABILITACIONES
       ADD FOREIGN KEY (nro_habilitacion)
                             REFERENCES HABILITACIONES
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_MOVIMIENTO_REPARTO
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_MOVIMIENTO_REPARTO
       ADD FOREIGN KEY (cod_movimiento)
                             REFERENCES MOVIMIENTO_REPARTO
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_NOTA_CREDITO
       ADD FOREIGN KEY (nro_nota)
                             REFERENCES NOTA_CREDITO
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_NOTA_CREDITO
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_NOTA_ENVIO
       ADD FOREIGN KEY (nro_nota)
                             REFERENCES NOTA_ENVIO
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_NOTA_ENVIO
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_NOTA_REMISION
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_NOTA_REMISION
       ADD FOREIGN KEY (nro_remision)
                             REFERENCES NOTA_REMISION
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_ORDEN_PAGO
       ADD FOREIGN KEY (nro_orden_pago)
                             REFERENCES ORDEN_PAGO
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_ORDEN_PAGO
       ADD FOREIGN KEY (nro_factura, proveedor)
                             REFERENCES FACTURA_PROVEEDOR
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_ORDEN_PRODUCCION
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_ORDEN_PRODUCCION
       ADD FOREIGN KEY (orden_nro)
                             REFERENCES ORDEN_PRODUCCION
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_ORDEN_REALIZADA
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_ORDEN_REALIZADA
       ADD FOREIGN KEY (nro_orden_terminado)
                             REFERENCES ORDEN_PRODUCCION_REALIZADA
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_PAGO_CLIENTE
       ADD FOREIGN KEY (banco, nro_cuenta)
                             REFERENCES BANCOS_CTAS
                             ON DELETE SET NULL;


ALTER TABLE DETALLE_PAGO_CLIENTE
       ADD FOREIGN KEY (nro_movimiento)
                             REFERENCES PAGO_CLIENTE
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_PEDIDO_CLIENTE
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_PEDIDO_CLIENTE
       ADD FOREIGN KEY (nro_pedido)
                             REFERENCES PEDIDO_CLIENTE
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_PEDIDO_PROVEEDOR
       ADD FOREIGN KEY (nro_pedido)
                             REFERENCES PEDIDO_PROVEEDOR
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_PEDIDO_REPARTO
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_PEDIDO_REPARTO
       ADD FOREIGN KEY (nro_pedido)
                             REFERENCES PEDIDO_REPARTO
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_RECETAS
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE DETALLE_RECETAS
       ADD FOREIGN KEY (cod_receta)
                             REFERENCES RECETAS
                             ON DELETE RESTRICT;


ALTER TABLE EMISION_CHEQUE
       ADD FOREIGN KEY (nro_orden_pago)
                             REFERENCES ORDEN_PAGO
                             ON DELETE SET NULL;


ALTER TABLE EMISION_CHEQUE
       ADD FOREIGN KEY (cod_estado)
                             REFERENCES ESTADO_CHEQUE
                             ON DELETE SET NULL;


ALTER TABLE EMISION_CHEQUE
       ADD FOREIGN KEY (cod_entidad, nro_cuenta)
                             REFERENCES BANCOS_CTAS
                             ON DELETE SET NULL;


ALTER TABLE EQUIVALENCIAS
       ADD FOREIGN KEY (cod_medida_1)
                             REFERENCES MEDIDAS
                             ON DELETE RESTRICT;


ALTER TABLE EQUIVALENCIAS
       ADD FOREIGN KEY (cod_medida)
                             REFERENCES MEDIDAS
                             ON DELETE RESTRICT;


ALTER TABLE ESTADOS
       ADD FOREIGN KEY (cod_pais)
                             REFERENCES PAISES
                             ON DELETE SET NULL;


ALTER TABLE FACTURA_CLIENTE
       ADD FOREIGN KEY (cod_condicion)
                             REFERENCES CONDICIONES_PAGOS
                             ON DELETE SET NULL;


ALTER TABLE FACTURA_CLIENTE
       ADD FOREIGN KEY (cod_persona)
                             REFERENCES PERSONAS
                             ON DELETE SET NULL;


ALTER TABLE FACTURA_CLIENTE
       ADD FOREIGN KEY (cod_persona)
                             REFERENCES PERSONAS
                             ON DELETE SET NULL;


ALTER TABLE FACTURA_CLIENTE
       ADD FOREIGN KEY (nro_habilitacion)
                             REFERENCES HABILITACIONES
                             ON DELETE SET NULL;


ALTER TABLE FACTURA_CLIENTE
       ADD FOREIGN KEY (nro_pedido)
                             REFERENCES PEDIDO_CLIENTE
                             ON DELETE SET NULL;


ALTER TABLE FACTURA_CLIENTE
       ADD FOREIGN KEY (cod_moneda)
                             REFERENCES MONEDAS
                             ON DELETE SET NULL;


ALTER TABLE FACTURA_PROVEEDOR
       ADD FOREIGN KEY (nro_pedido)
                             REFERENCES PEDIDO_PROVEEDOR
                             ON DELETE SET NULL;


ALTER TABLE GRUPO_PRODUCTO
       ADD FOREIGN KEY (cod_categoria)
                             REFERENCES CATEGORIAS
                             ON DELETE SET NULL;


ALTER TABLE HABILITACIONES
       ADD FOREIGN KEY (cod_caja)
                             REFERENCES CAJAS
                             ON DELETE SET NULL;


ALTER TABLE LISTA_PRECIOS_DET
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE RESTRICT;


ALTER TABLE LISTA_PRECIOS_DET
       ADD FOREIGN KEY (nro_lista)
                             REFERENCES LISTA_PRECIOS
                             ON DELETE RESTRICT;


ALTER TABLE MOVIMIENTO_REPARTO
       ADD FOREIGN KEY (nro_pedido)
                             REFERENCES PEDIDO_REPARTO
                             ON DELETE SET NULL;


ALTER TABLE NOTA_ENVIO
       ADD FOREIGN KEY (nro_pedido)
                             REFERENCES PEDIDO_REPARTO
                             ON DELETE SET NULL;


ALTER TABLE NOTA_REMISION
       ADD FOREIGN KEY (cod_persona)
                             REFERENCES PERSONAS
                             ON DELETE SET NULL;


ALTER TABLE ORDEN_PRODUCCION
       ADD FOREIGN KEY (cod_estado)
                             REFERENCES ESTADO_PRODUCCION
                             ON DELETE SET NULL;


ALTER TABLE ORDEN_PRODUCCION_REALIZADA
       ADD FOREIGN KEY (orden_nro)
                             REFERENCES ORDEN_PRODUCCION
                             ON DELETE SET NULL;


ALTER TABLE PAGO_CLIENTE
       ADD FOREIGN KEY (nro_habilitacion)
                             REFERENCES HABILITACIONES
                             ON DELETE SET NULL;


ALTER TABLE PAGO_CLIENTE
       ADD FOREIGN KEY (cod_tipo_pago)
                             REFERENCES TIPO_PAGO
                             ON DELETE SET NULL;


ALTER TABLE PAGO_CLIENTE
       ADD FOREIGN KEY (cod_moneda)
                             REFERENCES MONEDAS
                             ON DELETE SET NULL;


ALTER TABLE PAGO_CLIENTE
       ADD FOREIGN KEY (cod_entidad)
                             REFERENCES ENTIDAD_FINACIERA
                             ON DELETE SET NULL;


ALTER TABLE PAGO_PROVEEDOR
       ADD FOREIGN KEY (nro_factura, proveedor)
                             REFERENCES FACTURA_PROVEEDOR
                             ON DELETE SET NULL;


ALTER TABLE PARAMETROS_USUARIOS_PEDIDOS
       ADD FOREIGN KEY (usuario)
                             REFERENCES SYS_USUARIOS
                             ON DELETE RESTRICT;


ALTER TABLE PEDIDO_CLIENTE
       ADD FOREIGN KEY (cod_condicion)
                             REFERENCES CONDICIONES_PAGOS
                             ON DELETE SET NULL;


ALTER TABLE PEDIDO_CLIENTE
       ADD FOREIGN KEY (cod_persona)
                             REFERENCES PERSONAS
                             ON DELETE SET NULL;


ALTER TABLE PEDIDO_CLIENTE
       ADD FOREIGN KEY (cod_tipo_comprobante)
                             REFERENCES TIPO_COMPROBANTE
                             ON DELETE SET NULL;


ALTER TABLE PERSONAS
       ADD FOREIGN KEY (cod_tipo_documento)
                             REFERENCES TIPO_DOCUMENTO
                             ON DELETE SET NULL;


ALTER TABLE PERSONAS
       ADD FOREIGN KEY (departamento)
                             REFERENCES ESTADOS
                             ON DELETE SET NULL;


ALTER TABLE PERSONAS
       ADD FOREIGN KEY (nacionalidad)
                             REFERENCES PAISES
                             ON DELETE SET NULL;


ALTER TABLE PRODUCTOS
       ADD FOREIGN KEY (cod_marca)
                             REFERENCES MARCA
                             ON DELETE SET NULL;


ALTER TABLE PRODUCTOS
       ADD FOREIGN KEY (cod_tipo_iva)
                             REFERENCES TIPO_IVA
                             ON DELETE SET NULL;


ALTER TABLE PRODUCTOS
       ADD FOREIGN KEY (cod_tipo_producto)
                             REFERENCES CATEGORIAS
                             ON DELETE SET NULL;


ALTER TABLE PRODUCTOS
       ADD FOREIGN KEY (cod_procedencia)
                             REFERENCES PAISES
                             ON DELETE SET NULL;


ALTER TABLE PRODUCTOS
       ADD FOREIGN KEY (cod_medida)
                             REFERENCES MEDIDAS
                             ON DELETE SET NULL;


ALTER TABLE PRODUCTOS
       ADD FOREIGN KEY (cod_grupo)
                             REFERENCES GRUPO_PRODUCTO
                             ON DELETE SET NULL;


ALTER TABLE PRODUCTOS
       ADD FOREIGN KEY (cod_estante)
                             REFERENCES ESTANTES
                             ON DELETE SET NULL;


ALTER TABLE PRODUCTOS
       ADD FOREIGN KEY (cod_deposito)
                             REFERENCES DEPOSITO
                             ON DELETE SET NULL;


ALTER TABLE RECETAS
       ADD FOREIGN KEY (cod_producto)
                             REFERENCES PRODUCTOS
                             ON DELETE SET NULL;


ALTER TABLE SYS_PERMISOS
       ADD FOREIGN KEY (ID)
                             REFERENCES SYS_MENUS
                             ON DELETE RESTRICT;


ALTER TABLE SYS_PERMISOS
       ADD FOREIGN KEY (cod_grupo)
                             REFERENCES SYS_GRUPOS_USUARIOS
                             ON DELETE RESTRICT;


ALTER TABLE SYS_USUARIOS
       ADD FOREIGN KEY (cod_grupo)
                             REFERENCES SYS_GRUPOS_USUARIOS
                             ON DELETE SET NULL;


create proc dbo.dt_addtosourcecontrol
    @vchSourceSafeINI varchar(255) = '',
    @vchProjectName   varchar(255) ='',
    @vchComment       varchar(255) ='',
    @vchLoginName     varchar(255) ='',
    @vchPassword      varchar(255) =''

as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId = 0

declare @iStreamObjectId int
select @iStreamObjectId = 0

declare @VSSGUID varchar(100)
select @VSSGUID = 'SQLVersionControl.VCS_SQL'

declare @vchDatabaseName varchar(255)
select @vchDatabaseName = db_name()

declare @iReturnValue int
select @iReturnValue = 0

declare @iPropertyObjectId int
declare @vchParentId varchar(255)

declare @iObjectCount int
select @iObjectCount = 0

    exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT
    if @iReturn <> 0 GOTO E_OAError


    /* Create Project in SS */
    exec @iReturn = sp_OAMethod @iObjectId,
                                'AddProjectToSourceSafe',
                                NULL,
                                @vchSourceSafeINI,
                                @vchProjectName output,
                                @@SERVERNAME,
                                @vchDatabaseName,
                                @vchLoginName,
                                @vchPassword,
                                @vchComment


    if @iReturn <> 0 GOTO E_OAError

    exec @iReturn = sp_OAGetProperty @iObjectId, 'GetStreamObject', @iStreamObjectId OUT

    if @iReturn <> 0 GOTO E_OAError

    /* Set Database Properties */

    begin tran SetProperties

    /* add high level object */

    exec @iPropertyObjectId = dbo.dt_adduserobject_vcs 'VCSProjectID'

    select @vchParentId = CONVERT(varchar(255),@iPropertyObjectId)

    exec dbo.dt_setpropertybyid @iPropertyObjectId, 'VCSProjectID', @vchParentId , NULL
    exec dbo.dt_setpropertybyid @iPropertyObjectId, 'VCSProject' , @vchProjectName , NULL
    exec dbo.dt_setpropertybyid @iPropertyObjectId, 'VCSSourceSafeINI' , @vchSourceSafeINI , NULL
    exec dbo.dt_setpropertybyid @iPropertyObjectId, 'VCSSQLServer', @@SERVERNAME, NULL
    exec dbo.dt_setpropertybyid @iPropertyObjectId, 'VCSSQLDatabase', @vchDatabaseName, NULL

    if @@error <> 0 GOTO E_General_Error

    commit tran SetProperties

    declare cursorProcNames cursor for
        select convert(varchar(255), name) from sysobjects where type = 'P' and name not like 'dt_%'
    open cursorProcNames

    while 1 = 1
    begin
        declare @vchProcName varchar(255)
        fetch next from cursorProcNames into @vchProcName
        if @@fetch_status <> 0
            break

        select colid, text into #ProcLines
        from syscomments
        where id = object_id(@vchProcName)
        order by colid

        declare @iCurProcLine int
        declare @iProcLines int
        select @iCurProcLine = 1
        select @iProcLines = (select count(*) from #ProcLines)
        while @iCurProcLine <= @iProcLines
        begin
            declare @pos int
            select @pos = 1
            declare @iCurLineSize int
            select @iCurLineSize = len((select text from #ProcLines where colid = @iCurProcLine))
            while @pos <= @iCurLineSize
            begin
                declare @vchProcLinePiece varchar(255)
                select @vchProcLinePiece = convert(varchar(255),
                    substring((select text from #ProcLines where colid = @iCurProcLine),
                              @pos, 255 ))
                exec @iReturn = sp_OAMethod @iStreamObjectId, 'AddStream', @iReturnValue OUT, @vchProcLinePiece
                if @iReturn <> 0 GOTO E_OAError
                select @pos = @pos + 255
            end
            select @iCurProcLine = @iCurProcLine + 1
        end
        drop table #ProcLines

        exec @iReturn = sp_OAMethod @iObjectId,
                                    'CheckIn_StoredProcedure',
                      NULL,
                                    @sProjectName = @vchProjectName,
                                    @sSourceSafeINI = @vchSourceSafeINI,
                                    @sServerName = @@SERVERNAME,
                                    @sDatabaseName = @vchDatabaseName,
                                    @sObjectName = @vchProcName,
                                    @sComment = @vchComment,
                                    @sLoginName = @vchLoginName,
                                    @sPassword = @vchPassword,
                                    @iVCSFlags = 0,
                                    @iActionFlag = 0,
                                    @sStream = ''

        if @iReturn = 0 select @iObjectCount = @iObjectCount + 1

    end

CleanUp:
	close cursorProcNames
	deallocate cursorProcNames
    select @vchProjectName
    select @iObjectCount
    return

E_General_Error:
    /* this is an all or nothing.  No specific error messages */
    goto CleanUp

E_OAError:
    exec dbo.dt_displayoaerror @iObjectId, @iReturn
    goto CleanUp



create proc dbo.dt_addtosourcecontrol_u
    @vchSourceSafeINI nvarchar(255) = '',
    @vchProjectName   nvarchar(255) ='',
    @vchComment       nvarchar(255) ='',
    @vchLoginName     nvarchar(255) ='',
    @vchPassword      nvarchar(255) =''

as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId = 0

declare @iStreamObjectId int
select @iStreamObjectId = 0

declare @VSSGUID nvarchar(100)
select @VSSGUID = N'SQLVersionControl.VCS_SQL'

declare @vchDatabaseName varchar(255)
select @vchDatabaseName = db_name()

declare @iReturnValue int
select @iReturnValue = 0

declare @iPropertyObjectId int
declare @vchParentId nvarchar(255)

declare @iObjectCount int
select @iObjectCount = 0

    exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT
    if @iReturn <> 0 GOTO E_OAError


    /* Create Project in SS */
    exec @iReturn = sp_OAMethod @iObjectId,
                                'AddProjectToSourceSafe',
                                NULL,
                                @vchSourceSafeINI,
                                @vchProjectName output,
                                @@SERVERNAME,
                                @vchDatabaseName,
                                @vchLoginName,
                                @vchPassword,
                                @vchComment


    if @iReturn <> 0 GOTO E_OAError

    exec @iReturn = sp_OAGetProperty @iObjectId, N'GetStreamObject', @iStreamObjectId OUT

    if @iReturn <> 0 GOTO E_OAError

    /* Set Database Properties */

    begin tran SetProperties

    /* add high level object */

    exec @iPropertyObjectId = dbo.dt_adduserobject_vcs 'VCSProjectID'

    select @vchParentId = CONVERT(nvarchar(255),@iPropertyObjectId)

    exec dbo.dt_setpropertybyid_u @iPropertyObjectId, 'VCSProjectID', @vchParentId , NULL
    exec dbo.dt_setpropertybyid_u @iPropertyObjectId, 'VCSProject' , @vchProjectName , NULL
    exec dbo.dt_setpropertybyid_u @iPropertyObjectId, 'VCSSourceSafeINI' , @vchSourceSafeINI , NULL
    exec dbo.dt_setpropertybyid_u @iPropertyObjectId, 'VCSSQLServer', @@SERVERNAME, NULL
    exec dbo.dt_setpropertybyid_u @iPropertyObjectId, 'VCSSQLDatabase', @vchDatabaseName, NULL

    if @@error <> 0 GOTO E_General_Error

    commit tran SetProperties

    declare cursorProcNames cursor for
        select convert(nvarchar(255), name) from sysobjects where type = N'P' and name not like N'dt_%'
    open cursorProcNames

    while 1 = 1
    begin
        declare @vchProcName nvarchar(255)
        fetch next from cursorProcNames into @vchProcName
        if @@fetch_status <> 0
            break

        select colid, text into #ProcLines
        from syscomments
        where id = object_id(@vchProcName)
        order by colid

        declare @iCurProcLine int
        declare @iProcLines int
        select @iCurProcLine = 1
        select @iProcLines = (select count(*) from #ProcLines)
        while @iCurProcLine <= @iProcLines
        begin
            declare @pos int
            select @pos = 1
            declare @iCurLineSize int
            select @iCurLineSize = len((select text from #ProcLines where colid = @iCurProcLine))
            while @pos <= @iCurLineSize
            begin
                declare @vchProcLinePiece nvarchar(255)
                select @vchProcLinePiece = convert(nvarchar(255),
                    substring((select text from #ProcLines where colid = @iCurProcLine),
                              @pos, 255 ))
                exec @iReturn = sp_OAMethod @iStreamObjectId, N'AddStream', @iReturnValue OUT, @vchProcLinePiece
                if @iReturn <> 0 GOTO E_OAError
                select @pos = @pos + 255
            end
            select @iCurProcLine = @iCurProcLine + 1
        end
        drop table #ProcLines

        exec @iReturn = sp_OAMethod @iObjectId,
                                    'CheckIn_StoredProcedure',
                                    NULL,
                                    @sProjectName = @vchProjectName,
                                    @sSourceSafeINI = @vchSourceSafeINI,
                                    @sServerName = @@SERVERNAME,
                                    @sDatabaseName = @vchDatabaseName,
                                    @sObjectName = @vchProcName,
                                    @sComment = @vchComment,
                                    @sLoginName = @vchLoginName,
                                    @sPassword = @vchPassword,
                                    @iVCSFlags = 0,
                                    @iActionFlag = 0,
                                    @sStream = ''

        if @iReturn = 0 select @iObjectCount = @iObjectCount + 1

    end

CleanUp:
	close cursorProcNames
	deallocate cursorProcNames
    select @vchProjectName
    select @iObjectCount
    return

E_General_Error:
    /* this is an all or nothing.  No specific error messages */
    goto CleanUp

E_OAError:
    exec dbo.dt_displayoaerror_u @iObjectId, @iReturn
    goto CleanUp



/*
**	Add an object to the dtproperties table
*/
create procedure dbo.dt_adduserobject
as
	set nocount on
	/*
	** Create the user object if it does not exist already
	*/
	begin transaction
		insert dbo.dtproperties (property) VALUES ('DtgSchemaOBJECT')
		update dbo.dtproperties set objectid=@@identity 
			where id=@@identity and property='DtgSchemaOBJECT'
	commit
	return @@identity

create procedure dbo.dt_adduserobject_vcs
    @vchProperty varchar(64)

as

set nocount on

declare @iReturn int
    /*
    ** Create the user object if it does not exist already
    */
    begin transaction
        select @iReturn = objectid from dbo.dtproperties where property = @vchProperty
        if @iReturn IS NULL
        begin
            insert dbo.dtproperties (property) VALUES (@vchProperty)
            update dbo.dtproperties set objectid=@@identity
                    where id=@@identity and property=@vchProperty
            select @iReturn = @@identity
        end
    commit
    return @iReturn



create proc dbo.dt_checkinobject
    @chObjectType  char(4),
    @vchObjectName varchar(255),
    @vchComment    varchar(255)='',
    @vchLoginName  varchar(255),
    @vchPassword   varchar(255)='',
    @iVCSFlags     int = 0,
    @iActionFlag   int = 0,   /* 0 => AddFile, 1 => CheckIn */
    @txStream1     Text = '', /* There is a bug that if items are NULL they do not pass to OLE servers */
    @txStream2     Text = '',
    @txStream3     Text = ''


as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId = 0

declare @VSSGUID varchar(100)
select @VSSGUID = 'SQLVersionControl.VCS_SQL'


declare @iPropertyObjectId int
select @iPropertyObjectId  = 0

    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   varchar(255)
    declare @vchSourceSafeINI varchar(255)
    declare @vchServerName    varchar(255)
    declare @vchDatabaseName  varchar(255)
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if @chObjectType = 'PROC'
    begin
        if @iActionFlag = 1
        begin
            /* Procedure Can have up to three streams
            Drop Stream, Create Stream, GRANT stream */

            begin tran compile_all

            /* try to compile the streams */
            exec (@txStream1)
            if @@error <> 0 GOTO E_Compile_Fail

            exec (@txStream2)
            if @@error <> 0 GOTO E_Compile_Fail

            exec (@txStream3)
            if @@error <> 0 GOTO E_Compile_Fail
        end

        exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT
        if @iReturn <> 0 GOTO E_OAError

        if @iActionFlag = 1
        begin
            exec @iReturn = sp_OAMethod @iObjectId,
                                        'CheckIn_StoredProcedure',
                                        NULL,
                                        @sProjectName = @vchProjectName,
                                        @sSourceSafeINI = @vchSourceSafeINI,
                                        @sServerName = @vchServerName,
                                        @sDatabaseName = @vchDatabaseName,
                                        @sObjectName = @vchObjectName,
                                        @sComment = @vchComment,
                                        @sLoginName = @vchLoginName,
                                        @sPassword = @vchPassword,
                                        @iVCSFlags = @iVCSFlags,
                                        @iActionFlag = @iActionFlag,
                                        @sStream = @txStream2
        end
        else
        begin
            declare @iStreamObjectId int
            declare @iReturnValue int

            exec @iReturn = sp_OAGetProperty @iObjectId, 'GetStreamObject', @iStreamObjectId OUT
            if @iReturn <> 0 GOTO E_OAError

            select colid, text into #ProcLines
            from syscomments
            where id = object_id(@vchObjectName)
            order by colid

            declare @iCurProcLine int
            declare @iProcLines int
            select @iCurProcLine = 1
            select @iProcLines = (select count(*) from #ProcLines)
            while @iCurProcLine <= @iProcLines
            begin
                declare @pos int
                select @pos = 1
                declare @iCurLineSize int
                select @iCurLineSize = len((select text from #ProcLines where colid = @iCurProcLine))
                while @pos <= @iCurLineSize
                begin
               declare @vchProcLinePiece varchar(255)
                    select @vchProcLinePiece = convert(varchar(255),
                        substring((select text from #ProcLines where colid = @iCurProcLine),
                                  @pos, 255 ))
                    exec @iReturn = sp_OAMethod @iStreamObjectId, 'AddStream', @iReturnValue OUT, @vchProcLinePiece
                    if @iReturn <> 0 GOTO E_OAError
                    select @pos = @pos + 255
                end
                select @iCurProcLine = @iCurProcLine + 1
            end
            drop table #ProcLines

            exec @iReturn = sp_OAMethod @iObjectId,
                                        'CheckIn_StoredProcedure',
                                        NULL,
                                        @sProjectName = @vchProjectName,
                                        @sSourceSafeINI = @vchSourceSafeINI,
                                        @sServerName = @vchServerName,
                                        @sDatabaseName = @vchDatabaseName,
                                        @sObjectName = @vchObjectName,
                                        @sComment = @vchComment,
                                        @sLoginName = @vchLoginName,
                                        @sPassword = @vchPassword,
                                        @iVCSFlags = @iVCSFlags,
                                        @iActionFlag = @iActionFlag,
                                        @sStream = ''
        end

        if @iReturn <> 0 GOTO E_OAError

        if @iActionFlag = 1
        begin
            commit tran compile_all
            if @@error <> 0 GOTO E_Compile_Fail
        end

    end

CleanUp:
    return

E_Compile_Fail:
    declare @lerror int
    select @lerror = @@error
    rollback tran compile_all
    RAISERROR (@lerror,16,-1)
    goto CleanUp

E_OAError:
    if @iActionFlag = 1 rollback tran compile_all
    exec dbo.dt_displayoaerror @iObjectId, @iReturn
    goto CleanUp



create proc dbo.dt_checkinobject_u
    @chObjectType  char(4),
    @vchObjectName nvarchar(255),
    @vchComment    nvarchar(255)='',
    @vchLoginName  nvarchar(255),
    @vchPassword   nvarchar(255)='',
    @iVCSFlags     int = 0,
    @iActionFlag   int = 0,   /* 0 => AddFile, 1 => CheckIn */
    @txStream1     Text = '', /* There is a bug that if items are NULL they do not pass to OLE servers */
    @txStream2     Text = '',
    @txStream3     Text = ''


as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId = 0

declare @VSSGUID nvarchar(100)
select @VSSGUID = N'SQLVersionControl.VCS_SQL'


declare @iPropertyObjectId int
select @iPropertyObjectId  = 0

    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   nvarchar(255)
    declare @vchSourceSafeINI nvarchar(255)
    declare @vchServerName    nvarchar(255)
    declare @vchDatabaseName  nvarchar(255)
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if @chObjectType = 'PROC'
    begin
        if @iActionFlag = 1
        begin
            /* Procedure Can have up to three streams
            Drop Stream, Create Stream, GRANT stream */

            begin tran compile_all

            /* try to compile the streams */
            exec (@txStream1)
            if @@error <> 0 GOTO E_Compile_Fail

            exec (@txStream2)
            if @@error <> 0 GOTO E_Compile_Fail

            exec (@txStream3)
            if @@error <> 0 GOTO E_Compile_Fail
        end

        exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT
        if @iReturn <> 0 GOTO E_OAError

        if @iActionFlag = 1
        begin
            exec @iReturn = sp_OAMethod @iObjectId,
                                        N'CheckIn_StoredProcedure',
                                        NULL,
                                        @sProjectName = @vchProjectName,
                                        @sSourceSafeINI = @vchSourceSafeINI,
                                        @sServerName = @vchServerName,
                                        @sDatabaseName = @vchDatabaseName,
                                        @sObjectName = @vchObjectName,
                                        @sComment = @vchComment,
                                        @sLoginName = @vchLoginName,
                                        @sPassword = @vchPassword,
                                        @iVCSFlags = @iVCSFlags,
                                        @iActionFlag = @iActionFlag,
                                        @sStream = @txStream2
        end
        else
        begin
            declare @iStreamObjectId int
            declare @iReturnValue int

            exec @iReturn = sp_OAGetProperty @iObjectId, N'GetStreamObject', @iStreamObjectId OUT
            if @iReturn <> 0 GOTO E_OAError

            select colid, text into #ProcLines
            from syscomments
            where id = object_id(@vchObjectName)
            order by colid

            declare @iCurProcLine int
            declare @iProcLines int
            select @iCurProcLine = 1
            select @iProcLines = (select count(*) from #ProcLines)
            while @iCurProcLine <= @iProcLines
            begin
                declare @pos int
                select @pos = 1
                declare @iCurLineSize int
                select @iCurLineSize = len((select text from #ProcLines where colid = @iCurProcLine))
                while @pos <= @iCurLineSize
          begin
                    declare @vchProcLinePiece nvarchar(255)
                    select @vchProcLinePiece = convert(nvarchar(255),
                        substring((select text from #ProcLines where colid = @iCurProcLine),
                                  @pos, 255 ))
                    exec @iReturn = sp_OAMethod @iStreamObjectId, N'AddStream', @iReturnValue OUT, @vchProcLinePiece
                    if @iReturn <> 0 GOTO E_OAError
                    select @pos = @pos + 255
                end
                select @iCurProcLine = @iCurProcLine + 1
            end
            drop table #ProcLines

            exec @iReturn = sp_OAMethod @iObjectId,
                                        N'CheckIn_StoredProcedure',
                                        NULL,
                                        @sProjectName = @vchProjectName,
                                        @sSourceSafeINI = @vchSourceSafeINI,
                                        @sServerName = @vchServerName,
                                        @sDatabaseName = @vchDatabaseName,
                                        @sObjectName = @vchObjectName,
                                        @sComment = @vchComment,
                                        @sLoginName = @vchLoginName,
                                        @sPassword = @vchPassword,
                                        @iVCSFlags = @iVCSFlags,
                                        @iActionFlag = @iActionFlag,
                                        @sStream = ''
        end

        if @iReturn <> 0 GOTO E_OAError

        if @iActionFlag = 1
        begin
            commit tran compile_all
            if @@error <> 0 GOTO E_Compile_Fail
        end

    end

CleanUp:
    return

E_Compile_Fail:
    declare @lerror int
    select @lerror = @@error
    rollback tran compile_all
    RAISERROR (@lerror,16,-1)
    goto CleanUp

E_OAError:
    if @iActionFlag = 1 rollback tran compile_all
    exec dbo.dt_displayoaerror_u @iObjectId, @iReturn
    goto CleanUp



create proc dbo.dt_checkoutobject
    @chObjectType  char(4),
    @vchObjectName varchar(255),
    @vchComment    varchar(255),
    @vchLoginName  varchar(255),
    @vchPassword   varchar(255),
    @iVCSFlags     int = 0,
    @iActionFlag   int = 0/* 0 => Checkout, 1 => GetLatest, 2 => UndoCheckOut */

as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId =0

declare @VSSGUID varchar(100)
select @VSSGUID = 'SQLVersionControl.VCS_SQL'

declare @iReturnValue int
select @iReturnValue = 0

declare @vchTempText varchar(255)

/* this is for our strings */
declare @iStreamObjectId int
select @iStreamObjectId = 0

    declare @iPropertyObjectId int
    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   varchar(255)
    declare @vchSourceSafeINI varchar(255)
    declare @vchServerName    varchar(255)
    declare @vchDatabaseName  varchar(255)
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if @chObjectType = 'PROC'
    begin
        /* Procedure Can have up to three streams
           Drop Stream, Create Stream, GRANT stream */

        exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        exec @iReturn = sp_OAMethod @iObjectId,
                                    'CheckOut_StoredProcedure',
                                    NULL,
                                    @sProjectName = @vchProjectName,
                                    @sSourceSafeINI = @vchSourceSafeINI,
                                    @sObjectName = @vchObjectName,
                                    @sServerName = @vchServerName,
                                    @sDatabaseName = @vchDatabaseName,
                                    @sComment = @vchComment,
                                    @sLoginName = @vchLoginName,
                                    @sPassword = @vchPassword,
                                    @iVCSFlags = @iVCSFlags,
                                    @iActionFlag = @iActionFlag

        if @iReturn <> 0 GOTO E_OAError


        exec @iReturn = sp_OAGetProperty @iObjectId, 'GetStreamObject', @iStreamObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        create table #commenttext (id int identity, sourcecode varchar(255))


        select @vchTempText = 'STUB'
        while @vchTempText IS NOT NULL
        begin
            exec @iReturn = sp_OAMethod @iStreamObjectId, 'GetStream', @iReturnValue OUT, @vchTempText OUT
            if @iReturn <> 0 GOTO E_OAError

            if (@vchTempText IS NOT NULL) insert into #commenttext (sourcecode) select @vchTempText
        end

        select 'VCS'=sourcecode from #commenttext order by id
        select 'SQL'=text from syscomments where id = object_id(@vchObjectName) order by colid

    end

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror @iObjectId, @iReturn
    GOTO CleanUp



create proc dbo.dt_checkoutobject_u
    @chObjectType  char(4),
    @vchObjectName nvarchar(255),
    @vchComment    nvarchar(255),
    @vchLoginName  nvarchar(255),
    @vchPassword   nvarchar(255),
    @iVCSFlags     int = 0,
    @iActionFlag   int = 0/* 0 => Checkout, 1 => GetLatest, 2 => UndoCheckOut */

as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId =0

declare @VSSGUID nvarchar(100)
select @VSSGUID = N'SQLVersionControl.VCS_SQL'

declare @iReturnValue int
select @iReturnValue = 0

declare @vchTempText nvarchar(255)

/* this is for our strings */
declare @iStreamObjectId int
select @iStreamObjectId = 0

    declare @iPropertyObjectId int
    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   nvarchar(255)
    declare @vchSourceSafeINI nvarchar(255)
    declare @vchServerName    nvarchar(255)
    declare @vchDatabaseName  nvarchar(255)
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if @chObjectType = 'PROC'
    begin
        /* Procedure Can have up to three streams
           Drop Stream, Create Stream, GRANT stream */

        exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        exec @iReturn = sp_OAMethod @iObjectId,
                                    N'CheckOut_StoredProcedure',
                                    NULL,
                                    @sProjectName = @vchProjectName,
                                    @sSourceSafeINI = @vchSourceSafeINI,
                                    @sObjectName = @vchObjectName,
                                    @sServerName = @vchServerName,
                                    @sDatabaseName = @vchDatabaseName,
                                    @sComment = @vchComment,
                                    @sLoginName = @vchLoginName,
                                    @sPassword = @vchPassword,
                                    @iVCSFlags = @iVCSFlags,
                                    @iActionFlag = @iActionFlag

        if @iReturn <> 0 GOTO E_OAError


        exec @iReturn = sp_OAGetProperty @iObjectId, N'GetStreamObject', @iStreamObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        create table #commenttext (id int identity, sourcecode nvarchar(255))


        select @vchTempText = N'STUB'
        while @vchTempText IS NOT NULL
        begin
            exec @iReturn = sp_OAMethod @iStreamObjectId, N'GetStream', @iReturnValue OUT, @vchTempText OUT
            if @iReturn <> 0 GOTO E_OAError

            if (@vchTempText IS NOT NULL) insert into #commenttext (sourcecode) select @vchTempText
        end

        select N'VCS'=sourcecode from #commenttext order by id
        select N'SQL'=text from syscomments where id = object_id(@vchObjectName) order by colid

    end

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror_u @iObjectId, @iReturn
    GOTO CleanUp



CREATE PROCEDURE dbo.dt_displayoaerror
    @iObject int,
    @iresult int
as

set nocount on

declare @vchOutput      varchar(255)
declare @hr             int
declare @vchSource      varchar(255)
declare @vchDescription varchar(255)

    exec @hr = sp_OAGetErrorInfo @iObject, @vchSource OUT, @vchDescription OUT

    select @vchOutput = @vchSource + ': ' + @vchDescription
    raiserror (@vchOutput,16,-1)

    return


CREATE PROCEDURE dbo.dt_displayoaerror_u
    @iObject int,
    @iresult int
as

set nocount on

declare @vchOutput      nvarchar(255)
declare @hr             int
declare @vchSource      nvarchar(255)
declare @vchDescription nvarchar(255)

    exec @hr = sp_OAGetErrorInfo @iObject, @vchSource OUT, @vchDescription OUT

    select @vchOutput = @vchSource + ': ' + @vchDescription
    raiserror (@vchOutput,16,-1)

    return


/*
**	Drop one or all the associated properties of an object or an attribute 
**
**	dt_dropproperties objid, null or '' -- drop all properties of the object itself
**	dt_dropproperties objid, property -- drop the property
*/
create procedure dbo.dt_droppropertiesbyid
	@id int,
	@property varchar(64)
as
	set nocount on

	if (@property is null) or (@property = '')
		delete from dbo.dtproperties where objectid=@id
	else
		delete from dbo.dtproperties 
			where objectid=@id and property=@property


/*
**	Drop an object from the dbo.dtproperties table
*/
create procedure dbo.dt_dropuserobjectbyid
	@id int
as
	set nocount on
	delete from dbo.dtproperties where objectid=@id

/* 
**	Generate an ansi name that is unique in the dtproperties.value column 
*/ 
create procedure dbo.dt_generateansiname(@name varchar(255) output) 
as 
	declare @prologue varchar(20) 
	declare @indexstring varchar(20) 
	declare @index integer 
 
	set @prologue = 'MSDT-A-' 
	set @index = 1 
 
	while 1 = 1 
	begin 
		set @indexstring = cast(@index as varchar(20)) 
		set @name = @prologue + @indexstring 
		if not exists (select value from dtproperties where value = @name) 
			break 
		 
		set @index = @index + 1 
 
		if (@index = 10000) 
			goto TooMany 
	end 
 
Leave: 
 
	return 
 
TooMany: 
 
	set @name = 'DIAGRAM' 
	goto Leave 

/*
**	Retrieve the owner object(s) of a given property
*/
create procedure dbo.dt_getobjwithprop
	@property varchar(30),
	@value varchar(255)
as
	set nocount on

	if (@property is null) or (@property = '')
	begin
		raiserror('Must specify a property name.',-1,-1)
		return (1)
	end

	if (@value is null)
		select objectid id from dbo.dtproperties
			where property=@property

	else
		select objectid id from dbo.dtproperties
			where property=@property and value=@value

/*
**	Retrieve the owner object(s) of a given property
*/
create procedure dbo.dt_getobjwithprop_u
	@property varchar(30),
	@uvalue nvarchar(255)
as
	set nocount on

	if (@property is null) or (@property = '')
	begin
		raiserror('Must specify a property name.',-1,-1)
		return (1)
	end

	if (@uvalue is null)
		select objectid id from dbo.dtproperties
			where property=@property

	else
		select objectid id from dbo.dtproperties
			where property=@property and uvalue=@uvalue

/*
**	Retrieve properties by id's
**
**	dt_getproperties objid, null or '' -- retrieve all properties of the object itself
**	dt_getproperties objid, property -- retrieve the property specified
*/
create procedure dbo.dt_getpropertiesbyid
	@id int,
	@property varchar(64)
as
	set nocount on

	if (@property is null) or (@property = '')
		select property, version, value, lvalue
			from dbo.dtproperties
			where  @id=objectid
	else
		select property, version, value, lvalue
			from dbo.dtproperties
			where  @id=objectid and @property=property

/*
**	Retrieve properties by id's
**
**	dt_getproperties objid, null or '' -- retrieve all properties of the object itself
**	dt_getproperties objid, property -- retrieve the property specified
*/
create procedure dbo.dt_getpropertiesbyid_u
	@id int,
	@property varchar(64)
as
	set nocount on

	if (@property is null) or (@property = '')
		select property, version, uvalue, lvalue
			from dbo.dtproperties
			where  @id=objectid
	else
		select property, version, uvalue, lvalue
			from dbo.dtproperties
			where  @id=objectid and @property=property

create procedure dbo.dt_getpropertiesbyid_vcs
    @id       int,
    @property varchar(64),
    @value    varchar(255) = NULL OUT

as

    set nocount on

    select @value = (
        select value
                from dbo.dtproperties
                where @id=objectid and @property=property
                )


create procedure dbo.dt_getpropertiesbyid_vcs_u
    @id       int,
    @property varchar(64),
    @value    nvarchar(255) = NULL OUT

as

    set nocount on

    select @value = (
        select uvalue
                from dbo.dtproperties
                where @id=objectid and @property=property
                )


create proc dbo.dt_isundersourcecontrol
    @vchLoginName varchar(255) = '',
    @vchPassword  varchar(255) = '',
    @iWhoToo      int = 0 /* 0 => Just check project; 1 => get list of objs */

as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId = 0

declare @VSSGUID varchar(100)
select @VSSGUID = 'SQLVersionControl.VCS_SQL'

declare @iReturnValue int
select @iReturnValue = 0

declare @iStreamObjectId int
select @iStreamObjectId   = 0

declare @vchTempText varchar(255)

    declare @iPropertyObjectId int
    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   varchar(255)
    declare @vchSourceSafeINI varchar(255)
    declare @vchServerName    varchar(255)
    declare @vchDatabaseName  varchar(255)
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if (@vchProjectName IS NULL) or (@vchSourceSafeINI  IS NULL) or (@vchServerName IS NULL) or (@vchDatabaseName IS NULL)
    begin
        RAISERROR('Not Under Source Control',16,-1)
        return
    end

    if @iWhoToo = 1
    begin

        /* Get List of Procs in the project */
        exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT
        if @iReturn <> 0 GOTO E_OAError

        exec @iReturn = sp_OAMethod @iObjectId,
                                    'GetListOfObjects',
                                    NULL,
                                    @vchProjectName,
                                    @vchSourceSafeINI,
                                    @vchServerName,
                                    @vchDatabaseName,
                                    @vchLoginName,
                                    @vchPassword

        if @iReturn <> 0 GOTO E_OAError

        exec @iReturn = sp_OAGetProperty @iObjectId, 'GetStreamObject', @iStreamObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        create table #ObjectList (id int identity, vchObjectlist varchar(255))

        select @vchTempText = 'STUB'
        while @vchTempText IS NOT NULL
        begin
            exec @iReturn = sp_OAMethod @iStreamObjectId, 'GetStream', @iReturnValue OUT, @vchTempText OUT
            if @iReturn <> 0 GOTO E_OAError

            if (@vchTempText IS NOT NULL) insert into #ObjectList (vchObjectlist ) select @vchTempText
        end

        select vchObjectlist from #ObjectList order by id
    end

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror @iObjectId, @iReturn
    goto CleanUp



create proc dbo.dt_isundersourcecontrol_u
    @vchLoginName nvarchar(255) = '',
    @vchPassword  nvarchar(255) = '',
    @iWhoToo      int = 0 /* 0 => Just check project; 1 => get list of objs */

as

	set nocount on

	declare @iReturn int
	declare @iObjectId int
	select @iObjectId = 0

	declare @VSSGUID nvarchar(100)
	select @VSSGUID = N'SQLVersionControl.VCS_SQL'

	declare @iReturnValue int
	select @iReturnValue = 0

	declare @iStreamObjectId int
	select @iStreamObjectId   = 0

	declare @vchTempText nvarchar(255)

    declare @iPropertyObjectId int
    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   nvarchar(255)
    declare @vchSourceSafeINI nvarchar(255)
    declare @vchServerName    nvarchar(255)
    declare @vchDatabaseName  nvarchar(255)
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if (@vchProjectName IS NULL) or (@vchSourceSafeINI  IS NULL) or (@vchServerName IS NULL) or (@vchDatabaseName IS NULL)
    begin
        RAISERROR(N'Not Under Source Control',16,-1)
        return
    end

    if @iWhoToo = 1
    begin

        /* Get List of Procs in the project */
        exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT
        if @iReturn <> 0 GOTO E_OAError

        exec @iReturn = sp_OAMethod @iObjectId,
                                    N'GetListOfObjects',
                                    NULL,
                                    @vchProjectName,
                                    @vchSourceSafeINI,
                                    @vchServerName,
                                    @vchDatabaseName,
                                    @vchLoginName,
                                    @vchPassword

        if @iReturn <> 0 GOTO E_OAError

        exec @iReturn = sp_OAGetProperty @iObjectId, N'GetStreamObject', @iStreamObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        create table #ObjectList (id int identity, vchObjectlist nvarchar(255))

        select @vchTempText = N'STUB'
        while @vchTempText IS NOT NULL
        begin
            exec @iReturn = sp_OAMethod @iStreamObjectId, N'GetStream', @iReturnValue OUT, @vchTempText OUT
            if @iReturn <> 0 GOTO E_OAError

            if (@vchTempText IS NOT NULL) insert into #ObjectList (vchObjectlist ) select @vchTempText
        end

        select vchObjectlist from #ObjectList order by id
    end

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror_u @iObjectId, @iReturn
    goto CleanUp



create procedure dbo.dt_removefromsourcecontrol

as

    set nocount on

    declare @iPropertyObjectId int
    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    exec dbo.dt_droppropertiesbyid @iPropertyObjectId, null

    /* -1 is returned by dt_droppopertiesbyid */
    if @@error <> 0 and @@error <> -1 return 1

    return 0



/*
**	If the property already exists, reset the value; otherwise add property
**		id -- the id in sysobjects of the object
**		property -- the name of the property
**		value -- the text value of the property
**		lvalue -- the binary value of the property (image)
*/
create procedure dbo.dt_setpropertybyid
	@id int,
	@property varchar(64),
	@value varchar(255),
	@lvalue image
as
	set nocount on
	declare @uvalue nvarchar(255) 
	set @uvalue = convert(nvarchar(255), @value) 
	if exists (select * from dbo.dtproperties 
			where objectid=@id and property=@property)
	begin
		--
		-- bump the version count for this row as we update it
		--
		update dbo.dtproperties set value=@value, uvalue=@uvalue, lvalue=@lvalue, version=version+1
			where objectid=@id and property=@property
	end
	else
	begin
		--
		-- version count is auto-set to 0 on initial insert
		--
		insert dbo.dtproperties (property, objectid, value, uvalue, lvalue)
			values (@property, @id, @value, @uvalue, @lvalue)
	end


/*
**	If the property already exists, reset the value; otherwise add property
**		id -- the id in sysobjects of the object
**		property -- the name of the property
**		uvalue -- the text value of the property
**		lvalue -- the binary value of the property (image)
*/
create procedure dbo.dt_setpropertybyid_u
	@id int,
	@property varchar(64),
	@uvalue nvarchar(255),
	@lvalue image
as
	set nocount on
	-- 
	-- If we are writing the name property, find the ansi equivalent. 
	-- If there is no lossless translation, generate an ansi name. 
	-- 
	declare @avalue varchar(255) 
	set @avalue = null 
	if (@uvalue is not null) 
	begin 
		if (convert(nvarchar(255), convert(varchar(255), @uvalue)) = @uvalue) 
		begin 
			set @avalue = convert(varchar(255), @uvalue) 
		end 
		else 
		begin 
			if 'DtgSchemaNAME' = @property 
			begin 
				exec dbo.dt_generateansiname @avalue output 
			end 
		end 
	end 
	if exists (select * from dbo.dtproperties 
			where objectid=@id and property=@property)
	begin
		--
		-- bump the version count for this row as we update it
		--
		update dbo.dtproperties set value=@avalue, uvalue=@uvalue, lvalue=@lvalue, version=version+1
			where objectid=@id and property=@property
	end
	else
	begin
		--
		-- version count is auto-set to 0 on initial insert
		--
		insert dbo.dtproperties (property, objectid, value, uvalue, lvalue)
			values (@property, @id, @avalue, @uvalue, @lvalue)
	end

create proc dbo.dt_validateloginparams
    @vchLoginName  varchar(255),
    @vchPassword   varchar(255)
as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId =0

declare @VSSGUID varchar(100)
select @VSSGUID = 'SQLVersionControl.VCS_SQL'

    declare @iPropertyObjectId int
    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchSourceSafeINI varchar(255)
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT

    exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT
    if @iReturn <> 0 GOTO E_OAError

    exec @iReturn = sp_OAMethod @iObjectId,
                                'ValidateLoginParams',
                                NULL,
                                @sSourceSafeINI = @vchSourceSafeINI,
                                @sLoginName = @vchLoginName,
                                @sPassword = @vchPassword
    if @iReturn <> 0 GOTO E_OAError

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror @iObjectId, @iReturn
    GOTO CleanUp



create proc dbo.dt_validateloginparams_u
    @vchLoginName  nvarchar(255),
    @vchPassword   nvarchar(255)
as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId =0

declare @VSSGUID nvarchar(100)
select @VSSGUID = N'SQLVersionControl.VCS_SQL'

    declare @iPropertyObjectId int
    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchSourceSafeINI nvarchar(255)
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT

    exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT
    if @iReturn <> 0 GOTO E_OAError

    exec @iReturn = sp_OAMethod @iObjectId,
                                N'ValidateLoginParams',
                                NULL,
                                @sSourceSafeINI = @vchSourceSafeINI,
                                @sLoginName = @vchLoginName,
                                @sPassword = @vchPassword
    if @iReturn <> 0 GOTO E_OAError

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror_u @iObjectId, @iReturn
    GOTO CleanUp



create proc dbo.dt_vcsenabled

as

set nocount on

declare @iObjectId int
select @iObjectId = 0

declare @VSSGUID varchar(100)
select @VSSGUID = 'SQLVersionControl.VCS_SQL'

    declare @iReturn int
    exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT
    if @iReturn <> 0 raiserror('', 16, -1) /* Can't Load Helper DLLC */



/*
**	This procedure returns the version number of the stored
**    procedures used by the Microsoft Visual Database Tools.
**    Current version is 7.0.00.
*/
create procedure dbo.dt_verstamp006
as
	select 7000

create proc dbo.dt_whocheckedout
        @chObjectType  char(4),
        @vchObjectName varchar(255),
        @vchLoginName  varchar(255),
        @vchPassword   varchar(255)

as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId =0

declare @VSSGUID varchar(100)
select @VSSGUID = 'SQLVersionControl.VCS_SQL'

    declare @iPropertyObjectId int

    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   varchar(255)
    declare @vchSourceSafeINI varchar(255)
    declare @vchServerName    varchar(255)
    declare @vchDatabaseName  varchar(255)
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if @chObjectType = 'PROC'
    begin
        exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        declare @vchReturnValue varchar(255)
        select @vchReturnValue = ''

        exec @iReturn = sp_OAMethod @iObjectId,
                                    'WhoCheckedOut',
                                    @vchReturnValue OUT,
                                    @sProjectName = @vchProjectName,
                                    @sSourceSafeINI = @vchSourceSafeINI,
                                    @sObjectName = @vchObjectName,
                                    @sServerName = @vchServerName,
                                    @sDatabaseName = @vchDatabaseName,
                                    @sLoginName = @vchLoginName,
                                    @sPassword = @vchPassword

        if @iReturn <> 0 GOTO E_OAError

        select @vchReturnValue

    end

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror @iObjectId, @iReturn
    GOTO CleanUp



create proc dbo.dt_whocheckedout_u
        @chObjectType  char(4),
        @vchObjectName nvarchar(255),
        @vchLoginName  nvarchar(255),
        @vchPassword   nvarchar(255)

as

set nocount on

declare @iReturn int
declare @iObjectId int
select @iObjectId =0

declare @VSSGUID nvarchar(100)
select @VSSGUID = N'SQLVersionControl.VCS_SQL'

    declare @iPropertyObjectId int

    select @iPropertyObjectId = (select objectid from dbo.dtproperties where property = 'VCSProjectID')

    declare @vchProjectName   nvarchar(255)
    declare @vchSourceSafeINI nvarchar(255)
    declare @vchServerName    nvarchar(255)
    declare @vchDatabaseName  nvarchar(255)
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSProject',       @vchProjectName   OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSourceSafeINI', @vchSourceSafeINI OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSQLServer',     @vchServerName    OUT
    exec dbo.dt_getpropertiesbyid_vcs_u @iPropertyObjectId, 'VCSSQLDatabase',   @vchDatabaseName  OUT

    if @chObjectType = 'PROC'
    begin
        exec @iReturn = sp_OACreate @VSSGUID, @iObjectId OUT

        if @iReturn <> 0 GOTO E_OAError

        declare @vchReturnValue nvarchar(255)
        select @vchReturnValue = ''

        exec @iReturn = sp_OAMethod @iObjectId,
                                    N'WhoCheckedOut',
                                    @vchReturnValue OUT,
                                    @sProjectName = @vchProjectName,
                                    @sSourceSafeINI = @vchSourceSafeINI,
                                    @sObjectName = @vchObjectName,
                                    @sServerName = @vchServerName,
                                    @sDatabaseName = @vchDatabaseName,
                                    @sLoginName = @vchLoginName,
                                    @sPassword = @vchPassword

        if @iReturn <> 0 GOTO E_OAError

        select @vchReturnValue

    end

CleanUp:
    return

E_OAError:
    exec dbo.dt_displayoaerror_u @iObjectId, @iReturn
    GOTO CleanUp




